generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                    String             @id @default(cuid())
  guid                  String?
  name                  String?
  email                 String?            @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?            @unique
  passwordResetTokenExp DateTime?
  type                  users_type         @default(vendor)
  company_name          String?            @db.VarChar(191)
  contact_name          String?            @db.VarChar(191)
  contact_number        String?            @db.VarChar(191)
  website               String?            @db.VarChar(191)
  street1               String?            @db.VarChar(191)
  street2               String?            @db.VarChar(191)
  city                  String?            @db.VarChar(191)
  state                 String?            @db.VarChar(191)
  zip                   String?            @db.VarChar(191)
  location_number       String?            @db.VarChar(191)
  parking_loading       String?            @db.VarChar(191)
  counties              String?
  time_needed           String?
  catering_brokerage    String?
  frequency             String?
  provide               String?
  head_count            String?            @db.VarChar(191)
  status                users_status       @default(pending)
  side_notes            String?
  confirmation_code     String?
  remember_token        String?            @db.VarChar(100)
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  updated_at            DateTime           @default(now()) @db.Timestamptz(6)
  isTemporaryPassword   Boolean            @default(false)
  accounts              account[]
  createdAddresses      address[]
  catering_requests     catering_request[]
  driver_dispatches     dispatch[]         @relation("DriverRelation")
  dispatcher_dispatches dispatch[]         @relation("DispatcherRelation")
  file_uploads          file_upload[]
  on_demands            on_demand[]
  sessions              session[]
  savedAddresses        userAddress[]
}

model on_demand {
  id                  BigInt                 @id @default(autoincrement())
  guid                String?
  user_id             String
  address_id          String
  order_number        String                 @unique @db.VarChar(191)
  date                DateTime               @db.Date
  pickup_time         DateTime               @db.Time(6)
  arrival_time        DateTime               @db.Time(6)
  complete_time       DateTime?              @db.Time(6)
  hours_needed        String?                @db.VarChar(191)
  item_delivered      String?                @db.VarChar(191)
  vehicle_type        on_demand_vehicle_type @default(Car)
  client_attention    String
  pickup_notes        String?
  special_notes       String?
  image               String?
  status              on_demand_status       @default(active)
  order_total         Decimal?               @default(0.00) @db.Decimal(10, 2)
  tip                 Decimal?               @default(0.00) @db.Decimal(10, 2)
  length              String?                @db.VarChar(191)
  width               String?                @db.VarChar(191)
  height              String?                @db.VarChar(191)
  weight              String?                @db.VarChar(191)
  created_at          DateTime               @default(now()) @db.Timestamptz(6)
  updated_at          DateTime               @default(now()) @db.Timestamptz(6)
  delivery_address_id String
  driver_status       driver_status?
  dispatch            dispatch[]
  fileUploads         file_upload[]
  address             address                @relation("PickupAddress", fields: [address_id], references: [id])
  delivery_address    address                @relation("DeliveryAddress", fields: [delivery_address_id], references: [id])
  user                user                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model address {
  id                String             @id @default(cuid())
  county            String?
  street1           String
  street2           String?
  city              String
  state             String
  zip               String
  createdAt         DateTime           @default(now())
  createdBy         String?
  isRestaurant      Boolean            @default(false)
  isShared          Boolean            @default(false)
  locationNumber    String?
  parkingLoading    String?
  updatedAt         DateTime           @updatedAt
  name              String?
  creator           user?              @relation(fields: [createdBy], references: [id])
  pickupRequests    catering_request[] @relation("PickupAddress")
  deliveryRequests  catering_request[] @relation("DeliveryAddress")
  onDemandsPickup   on_demand[]        @relation("PickupAddress")
  onDemandsDelivery on_demand[]        @relation("DeliveryAddress")
  userAddresses     userAddress[]
}

model userAddress {
  id        String   @id @default(cuid())
  userId    String
  addressId String
  alias     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, addressId])
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification_token {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model catering_request {
  id                  BigInt                      @id @default(autoincrement())
  guid                String?
  user_id             String
  address_id          String
  brokerage           String?                     @db.VarChar(191)
  order_number        String                      @unique
  date                DateTime?                   @db.Date
  pickup_time         DateTime?                   @db.Time(6)
  arrival_time        DateTime?                   @db.Time(6)
  complete_time       DateTime?                   @db.Time(6)
  headcount           String?                     @db.VarChar(191)
  need_host           catering_requests_need_host @default(no)
  hours_needed        String?                     @db.VarChar(191)
  number_of_host      String?                     @db.VarChar(191)
  client_attention    String?
  pickup_notes        String?
  special_notes       String?
  image               String?
  status              catering_requests_status?   @default(active)
  order_total         Decimal?                    @default(0.00) @db.Decimal(10, 2)
  tip                 Decimal?                    @default(0.00) @db.Decimal(10, 2)
  created_at          DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at          DateTime                    @default(now()) @db.Timestamptz(6)
  delivery_address_id String
  driver_status       driver_status?
  address             address                     @relation("PickupAddress", fields: [address_id], references: [id])
  delivery_address    address                     @relation("DeliveryAddress", fields: [delivery_address_id], references: [id])
  user                user                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  dispatch            dispatch[]                  @relation("DispatchToCateringRequest")
  fileUploads         file_upload[]
}

model dispatch {
  id                String            @id @default(cuid())
  cateringRequestId BigInt?
  createdAt         DateTime          @default(now()) @db.Timestamptz(6)
  driverId          String?
  on_demandId       BigInt?
  updatedAt         DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  userId            String?
  cateringRequest   catering_request? @relation("DispatchToCateringRequest", fields: [cateringRequestId], references: [id])
  driver            user?             @relation("DriverRelation", fields: [driverId], references: [id])
  on_demand         on_demand?        @relation(fields: [on_demandId], references: [id])
  dispatcher        user?             @relation("DispatcherRelation", fields: [userId], references: [id])
}

model file_upload {
  id                String            @id @default(cuid())
  userId            String?
  fileName          String
  fileType          String
  fileSize          Int
  fileUrl           String
  uploadedAt        DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  cateringRequestId BigInt?
  onDemandId        BigInt?
  entityType        String
  entityId          String
  category          String?
  cateringRequest   catering_request? @relation(fields: [cateringRequestId], references: [id], onDelete: Cascade)
  onDemand          on_demand?        @relation(fields: [onDemandId], references: [id], onDelete: Cascade)
  user              user?             @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
}

model form_submission {
  id                  String             @id @default(uuid())
  updated_at          DateTime           @updatedAt @map("updatedAt")
  form_type           FormSubmissionType @map("formType")
  company_name        String             @map("companyName")
  contact_name        String             @map("contactName")
  email               String
  phone               String
  website             String
  counties            Json
  frequency           String
  pickup_address      Json               @map("pickupAddress")
  additional_comments String             @map("additionalComments")
  specifications      String

  @@map("form_submissions")
}

model lead_capture {
  id                 Int      @id @default(autoincrement())
  first_name         String
  last_name          String
  email              String   @unique
  industry           String
  newsletter_consent Boolean  @default(false)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@map("lead_capture")
}

enum FormSubmissionType {
  food
  flower
  bakery
  specialty
}

enum driver_status {
  arrived_at_vendor
  en_route_to_client
  arrived_to_client
  assigned
  completed
}

enum catering_requests_need_host {
  yes
  no
}

enum catering_requests_status {
  active
  assigned
  cancelled
  completed
}

enum on_demand_status {
  active
  assigned
  cancelled
  completed
}

enum on_demand_vehicle_type {
  Car
  Van
  Truck
}

enum users_status {
  active
  pending
  deleted
}

enum users_type {
  vendor
  client
  driver
  admin
  helpdesk
  super_admin
}
