generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                  String            @id @default(uuid()) @db.Uuid
  guid                String?
  name                String?
  email               String            @unique
  image               String?
  type                UserType          @default(VENDOR)
  companyName         String?
  contactName         String?
  contactNumber       String?
  website             String?
  street1             String?
  street2             String?
  city                String?
  state               String?
  zip                 String?
  locationNumber      String?
  parkingLoading      String?
  counties            Json?
  timeNeeded          String?
  cateringBrokerage   String?
  frequency           String?
  provide             String?
  headCount           Int?
  status              UserStatus        @default(PENDING)
  sideNotes           String?
  confirmationCode    String?
  createdAt           DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime          @updatedAt @db.Timestamptz(6)
  isTemporaryPassword Boolean           @default(false)
  deletedAt           DateTime?         @db.Timestamptz(6)
  accounts            Account[]
  createdAddresses    Address[]         @relation("AddressCreatedBy")
  cateringRequests    CateringRequest[]
  driverDispatches    Dispatch[]        @relation("DriverDispatch")
  userDispatches      Dispatch[]        @relation("UserDispatch")
  fileUploads         FileUpload[]
  jobApplications     JobApplication[]  @relation("ProfileToJobApplication")
  onDemandRequests    OnDemand[]
  sessions            Session[]
  userAddresses       UserAddress[]

  @@index([email])
  @@index([type])
  @@index([status])
  @@map("profiles")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Address {
  id                       String            @id @default(uuid()) @db.Uuid
  county                   String?
  street1                  String
  street2                  String?
  city                     String
  state                    String
  zip                      String
  createdAt                DateTime          @default(now())
  createdBy                String?           @db.Uuid
  isRestaurant             Boolean           @default(false)
  isShared                 Boolean           @default(false)
  locationNumber           String?
  parkingLoading           String?
  updatedAt                DateTime          @updatedAt
  name                     String?
  latitude                 Float?
  longitude                Float?
  deletedAt                DateTime?         @db.Timestamptz(6)
  creator                  Profile?          @relation("AddressCreatedBy", fields: [createdBy], references: [id])
  cateringDeliveryRequests CateringRequest[] @relation("CateringDelivery")
  cateringPickupRequests   CateringRequest[] @relation("CateringPickup")
  onDemandDeliveryRequests OnDemand[]        @relation("OnDemandDelivery")
  onDemandPickupRequests   OnDemand[]        @relation("OnDemandPickup")
  userAddresses            UserAddress[]

  @@index([createdBy])
  @@index([city, state])
  @@map("addresses")
}

model CateringRequest {
  id                String           @id @default(uuid()) @db.Uuid
  guid              String?
  userId            String           @db.Uuid
  pickupAddressId   String           @db.Uuid
  deliveryAddressId String           @db.Uuid
  brokerage         String?
  orderNumber       String           @unique
  pickupDateTime    DateTime?        @db.Timestamptz(6)
  arrivalDateTime   DateTime?        @db.Timestamptz(6)
  completeDateTime  DateTime?        @db.Timestamptz(6)
  headcount         Int?
  needHost          CateringNeedHost @default(NO)
  hoursNeeded       Float?
  numberOfHosts     Int?
  clientAttention   String?
  pickupNotes       String?
  specialNotes      String?
  image             String?
  status            CateringStatus   @default(ACTIVE)
  orderTotal        Decimal?         @default(0.00) @db.Decimal(10, 2)
  tip               Decimal?         @default(0.00) @db.Decimal(10, 2)
  createdAt         DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime         @updatedAt @db.Timestamptz(6)
  driverStatus      DriverStatus?
  deletedAt         DateTime?        @db.Timestamptz(6)
  deliveryAddress   Address          @relation("CateringDelivery", fields: [deliveryAddressId], references: [id])
  pickupAddress     Address          @relation("CateringPickup", fields: [pickupAddressId], references: [id])
  user              Profile          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dispatches        Dispatch[]
  fileUploads       FileUpload[]

  @@index([userId])
  @@index([status])
  @@index([pickupDateTime])
  @@index([userId, status])
  @@index([deliveryAddressId, pickupDateTime])
  @@map("catering_requests")
}

model Dispatch {
  id                String           @id @default(uuid()) @db.Uuid
  cateringRequestId String?          @db.Uuid
  createdAt         DateTime         @default(now()) @db.Timestamptz(6)
  driverId          String?          @db.Uuid
  onDemandId        String?          @db.Uuid
  updatedAt         DateTime         @updatedAt @db.Timestamptz(6)
  userId            String?          @db.Uuid
  cateringRequest   CateringRequest? @relation(fields: [cateringRequestId], references: [id])
  driver            Profile?         @relation("DriverDispatch", fields: [driverId], references: [id])
  onDemand          OnDemand?        @relation(fields: [onDemandId], references: [id])
  user              Profile?         @relation("UserDispatch", fields: [userId], references: [id])

  @@index([driverId])
  @@index([cateringRequestId])
  @@index([onDemandId])
  @@map("dispatches")
}

model FileUpload {
  id                String           @id @default(uuid()) @db.Uuid
  userId            String?          @db.Uuid
  fileName          String
  fileType          String
  fileSize          Int
  fileUrl           String
  uploadedAt        DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  cateringRequestId String?          @db.Uuid
  onDemandId        String?          @db.Uuid
  jobApplicationId  String?          @db.Uuid
  category          String?
  isTemporary       Boolean          @default(false)
  cateringRequest   CateringRequest? @relation(fields: [cateringRequestId], references: [id], onDelete: Cascade)
  jobApplication    JobApplication?  @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  onDemand          OnDemand?        @relation(fields: [onDemandId], references: [id], onDelete: Cascade)
  user              Profile?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([cateringRequestId])
  @@index([onDemandId])
  @@index([jobApplicationId])
  @@index([fileType])
  @@map("file_uploads")
}

model OnDemand {
  id                String         @id @default(uuid()) @db.Uuid
  guid              String?
  userId            String         @db.Uuid
  pickupAddressId   String         @db.Uuid
  deliveryAddressId String         @db.Uuid
  orderNumber       String         @unique
  pickupDateTime    DateTime       @db.Timestamptz(6)
  arrivalDateTime   DateTime       @db.Timestamptz(6)
  completeDateTime  DateTime?      @db.Timestamptz(6)
  hoursNeeded       Float?
  itemDelivered     String?
  vehicleType       VehicleType    @default(CAR)
  clientAttention   String
  pickupNotes       String?
  specialNotes      String?
  image             String?
  status            OnDemandStatus @default(ACTIVE)
  orderTotal        Decimal?       @default(0.00) @db.Decimal(10, 2)
  tip               Decimal?       @default(0.00) @db.Decimal(10, 2)
  length            Float?
  width             Float?
  height            Float?
  weight            Float?
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @updatedAt @db.Timestamptz(6)
  driverStatus      DriverStatus?
  deletedAt         DateTime?      @db.Timestamptz(6)
  dispatches        Dispatch[]
  fileUploads       FileUpload[]
  deliveryAddress   Address        @relation("OnDemandDelivery", fields: [deliveryAddressId], references: [id])
  pickupAddress     Address        @relation("OnDemandPickup", fields: [pickupAddressId], references: [id])
  user              Profile        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([pickupDateTime])
  @@index([vehicleType])
  @@index([userId, status])
  @@map("on_demand_requests")
}

model UserAddress {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  addressId String   @db.Uuid
  alias     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, addressId])
  @@index([userId])
  @@index([addressId])
  @@map("user_addresses")
}

model VerificationToken {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([token])
  @@map("verification_tokens")
}

model FormSubmission {
  id                 String   @id @default(uuid()) @db.Uuid
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  formType           FormType
  companyName        String
  contactName        String
  email              String
  phone              String
  website            String
  counties           Json
  frequency          String
  pickupAddress      Json
  additionalComments String
  specifications     String

  @@index([formType])
  @@index([email])
  @@map("form_submissions")
}

model LeadCapture {
  id                String   @id @default(uuid()) @db.Uuid
  firstName         String
  lastName          String
  email             String   @unique
  industry          String
  newsletterConsent Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([email])
  @@index([industry])
  @@map("lead_captures")
}

model JobApplication {
  id                     String            @id @default(uuid()) @db.Uuid
  profileId              String?           @db.Uuid
  firstName              String
  lastName               String
  email                  String
  phone                  String?
  position               String
  addressStreet          String
  addressCity            String
  addressState           String
  addressZip             String
  education              String?
  workExperience         String?
  skills                 String?
  coverLetter            String?
  resumeFilePath         String?
  driversLicenseFilePath String?
  insuranceFilePath      String?
  vehicleRegFilePath     String?
  foodHandlerFilePath    String?
  hipaaFilePath          String?
  driverPhotoFilePath    String?
  carPhotoFilePath       String?
  equipmentPhotoFilePath String?
  status                 ApplicationStatus @default(PENDING)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?         @db.Timestamptz(6)
  fileUploads            FileUpload[]
  profile                Profile?          @relation("ProfileToJobApplication", fields: [profileId], references: [id])

  @@index([email])
  @@index([status])
  @@index([position])
  @@map("job_applications")
}

enum UserType {
  VENDOR
  CLIENT
  DRIVER
  ADMIN
  HELPDESK
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  PENDING
  DELETED
}

enum DriverStatus {
  ARRIVED_AT_VENDOR
  EN_ROUTE_TO_CLIENT
  ARRIVED_TO_CLIENT
  ASSIGNED
  COMPLETED
}

enum CateringNeedHost {
  YES
  NO
}

enum CateringStatus {
  ACTIVE
  ASSIGNED
  CANCELLED
  COMPLETED
  PENDING
  CONFIRMED
  IN_PROGRESS
  DELIVERED
}

enum OnDemandStatus {
  ACTIVE
  ASSIGNED
  CANCELLED
  COMPLETED
  PENDING
  CONFIRMED
  IN_PROGRESS
  DELIVERED
}

enum VehicleType {
  CAR
  VAN
  TRUCK
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  INTERVIEWING
}

enum FormType {
  FOOD
  FLOWER
  BAKERY
  SPECIALTY
}
